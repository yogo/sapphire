
%strong Quick Add
= form_for("item", @item, :url => project_collection_items_path(@project, collection),  :html => {"multipart" => true, "data-ajax"=> false, :class => 'form-inline', :id => 'QAcreateItemForm', 'data-focus-on' => "input:visible:first"}) do |f| 
  - collection.schema.each do |field|
    -if field.controlled_vocabulary
      = f.select(field.to_s, field_value_options(field.controlled_vocabulary), 
                {:include_blank => field.name}, {:class => 'input-medium'})
    -elsif field.is_file == true
      %label 
        = field.name
      = f.file_field(field.to_s, :class => 'input-medium')
    -elsif field.associated_schema
      :plain
        <input type="hidden" class="bigdrop" id="c_#{field.to_s}_1" style="width:150px"/>
      :javascript
        datas=""
        $(document).ready(function() { $("#c_#{field.to_s}").select2(); 
        $("#c_#{field.to_s}_1").select2({
                    placeholder: "#{field.name}",
                    minimumInputLength: 0,
                    ajax: {
                        url: "#{project_collection_associations_path(field.associated_schema.data_collection.project,field.associated_schema.data_collection,:schema_id=>field.associated_schema, :page=>1)}",
                        dataType: 'json',
                        quietMillis: 100,
                        data: function (term, page) { // page is the one-based page number tracked by Select2
                            return {
                                term: term, //search term
                                page: page, // page number
                            };
                        },
                        results: function (data, page) {
                          datas=data;
                            var more = (page * 10) < data.total; // whether or not there are more results available
                            return {results: data.items, more: more};
                        }
                    },
                    dropdownCssClass: "bigdrop", // apply css that makes the dropdown taller
                    escapeMarkup: function (m) { return m; } // we do not want to escape markup since we are displaying html in results
                });})
    -elsif field.type.to_s == "Yogo::Collection::Property::Date"
      = f.text_field(field.to_s, :id=> "c_"+field.to_s, :placeholder => field.name, :class => 'input-medium') 
      :javascript
        $("#c_#{field.to_s}").datepicker({dateFormat:'yy-mm-dd'});
    -elsif field.type.to_s == "Yogo::Collection::Property::DateTime"
      = f.text_field(field.to_s, :id=> "c_"+field.to_s, :placeholder => field.name, :class => 'input-medium') 
      :javascript
        $("#c_#{field.to_s}").datetimepicker({dateFormat:'yy-mm-dd'});
    -elsif field.type.to_s == "Yogo::Collection::Property::Text"
      = f.text_field(field.to_s, :id=> field.to_s, :placeholder => field.name, :class => 'input-large', :rows => 4) 
    -elsif field.type.to_s == "Yogo::Collection::Property::Boolean"
      %label 
        = f.check_box(field.to_s, :id=> field.to_s, :class => 'input-medium') 
        = field.name
    
    -else
      = f.text_field(field.to_s, :placeholder => field.name, :class => 'input-medium') 
  -#= f.file_field(:file, :class => 'input-medium')
%button.btn-small.btn-primary{:id=>'save_button'} Save
#progress
  
:javascript
  function formfocus() {
    $('#QAcreateItemForm input:visible:first').focus();
  }
  function beforeSendHandler(){
    $('body').modalmanager('loading');
  }
  function completeHandler(){
    updateGrid(grid);
    $('#QAcreateItemForm')[0].reset();
    $('body').modalmanager('loading');
  }
  function errorHandler(data){
    alert("Error: " + data["errors"]);
  }
  function progressHandlingFunction(e){
      if(e.lengthComputable){
          $('progress').attr({value:e.loaded,max:e.total});
      }
  }
  window.onload = formfocus;
  $('#save_button').click(function() {  
      var valuesToSubmit = new FormData($('#QAcreateItemForm')[0]);//.serialize();
      $.ajax({
          url:$('#QAcreateItemForm').attr('action'),
          type: 'POST',
          beforeSend: beforeSendHandler,
          success:  completeHandler,
          data: valuesToSubmit,
          cache: false,
          contentType: false,
          processData: false,
          dataType: 'json'
     }).fail(function(data){alert("Error" + data["errors"]);});
  });
  
  function itemAssociationResult(assoc) {
      var markup = "<table class='movie-result'><tr>";
      if (movie.posters !== undefined && movie.posters.thumbnail !== undefined) {
          markup += "<td class='movie-image'><img src='" + movie.posters.thumbnail + "'/></td>";
      }
      markup += "<td class='movie-info'><div class='movie-title'>" + movie.title + "</div>";
      if (movie.critics_consensus !== undefined) {
          markup += "<div class='movie-synopsis'>" + movie.critics_consensus + "</div>";
      }
      else if (movie.synopsis !== undefined) {
          markup += "<div class='movie-synopsis'>" + movie.synopsis + "</div>";
      }
      markup += "</td></tr></table>"
      return markup;
  }

  function itemFormatSelection(item) {
      return item.project.collection.item.id;
  }
  