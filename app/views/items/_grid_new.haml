= javascript_include_tag 'slickgrid/jquery.event.drag-2.0.min.js','slickgrid/slick.core.js','slickgrid/slick.grid.js','slickgrid/slick.headerbuttons.js','slickgrid/slick.pager.js','slickgrid/slick.dataview.js','slickgrid/slick.autotootips.js','slickgrid/slick.remotemodel.js'
= stylesheet_link_tag 'slickgrid/jquery-ui-1.8.16.custom.css','slickgrid/slick.grid.css','slickgrid/grid_style.css','slickgrid/slick.headerbuttons.css','slickgrid/slick.pager.css'
:plain
 <style>
     .slick-headerrow-column {
       background: #87ceeb;
       text-overflow: clip;
       -moz-box-sizing: border-box;
       box-sizing: border-box;
     }

     .slick-headerrow-column input {
       margin: 0;
       padding: 0;
       width: 100%;
       height: 100%;
       -moz-box-sizing: border-box;
       box-sizing: border-box;
     }

   </style>
#myGrid{:style=>"height: 330px;"}
#pager.span11{:style=>"height:20px;"}
:javascript
  function load_modal(url){
    $("body").modalmanager("loading");setTimeout(function(){
      $("#ajax-modal").load(url, "", function(){
        $("#ajax-modal").modal();
      });
    }, 1000);
  }
  function load_widemodal(url){
    $("body").modalmanager("loading");setTimeout(function(){
      $("#ajax-modal-fw").load(url, "", function(){
        $("#ajax-modal-fw").modal();
      });
    }, 1000);
  }
  var data ="";
  
  function buttonFormatter(row, cell, value, columnDef, dataContext) {
    var base_url ="#{project_collection_path(project,collection)}/items/"+value.toString();
    
    var buttons =  '<a id="show_'+value.toString()+'" class="icon-time item-show" data-toggle="modal" href="#" onclick="load_widemodal(\''+base_url + '\')"></a><a id="edit_'+value.toString()+'" class="icon-edit item-edit" data-toggle="modal" href="#" onclick="load_modal(\''+base_url + '/edit\')"></a><a class="icon-remove-circle" href="'+base_url+'" data-method="delete" data-confirm="Are you sure you wish to delete this Item?" rel="nofollow"></a>';


    return buttons;
  }
  function editFormatter(row, cell, value, columnDef, dataContext) {
    return '<a class="icon-time item-edit" data-toggle="modal" href="#"></a>'

  }
  
  function historyFormatter(row, cell, value, columnDef, dataContext) {
    return '<a class="icon-time item-show" data-toggle="modal" href="#"></a>'
  }
  
  function cvFormatter(row, cell, value, columnDef, dataContext) {
    if (value != null)
      return value
    else
      return ""
    end
  }
  
  function assocFormatter(row, cell, value, columnDef, dataContext) {
    if (value != null)
    {  
      json_string = JSON.parse(value)
      if (json_string != null){
      var url ="/projects/"+json_string['project']['id']+"/collections/"+json_string['collection']['id']+"/items/"+json_string['item']['id'];
      var val = '<a id="show_'+value.toString()+'" class="icon-edit item-show" data-toggle="modal" href="#" onclick="load_modal(\''+url + '/edit\')"></a><a id="show_'+value.toString()+'" class="item-show" data-toggle="modal" href="#" onclick="load_widemodal(\''+url +'\')">' + json_string['item']['display']+'</a>';
      return val;
     }
     else{
       return value;
     }

    }
    else
      return ""
    end

  }
  
  function fileFormatter(row, cell, value, columnDef, dataContext) {
    if (value != null)
      return '<a href="#{root_url}asset_collection/#{collection.id.to_s}/' + value + '">Download</a>'
    else
      return ""
    end
  }

  
  
  function showDialog(url){
     $("#term_info").html('<iframe id="modalIframeId" width="100%" height="100%" marginWidth="0" marginHeight="0" frameBorder="0" scrolling="auto"/>').dialog("open");
     $("#modalIframeId").attr("src",url);
     return false;
  }
  function updateGrid(myGrid) {
       $.getJSON("#{project_collection_objects_path(project, collection, :format=> 'json')}", function(data) {
           myGrid.data = data;
           dataView.setItems(myGrid.data);
           myGrid.invalidate();
           myGrid.render();
           myGrid.autosizeColumns();
           myGrid.onSort.subscribe(function (e, args) {
              var cols = args.sortCols;

              data.sort(function (dataRow1, dataRow2) {
                for (var i = 0, l = cols.length; i < l; i++) {
                  var field = cols[i].sortCol.field;
                  var sign = cols[i].sortAsc ? 1 : -1;
                  var value1 = dataRow1[field], value2 = dataRow2[field];
                  var result = (value1 == value2 ? 0 : (value1 > value2 ? 1 : -1)) * sign;
                  if (result != 0) {
                    return result;
                  }
                }
                return 0;
              }
              );
          });
       });
   }
   var loader = new Slick.Data.RemoteModel("#{project_collection_items_url(@project, @collection)}");
   var loadingIndicator = null;
   var dataView = new Slick.Data.DataView();
   var grid =";" 
  $(document).ready(function() {
    
     $("#term_info").dialog({
         autoOpen: false,
         modal: true,
         height: 500,
         width: 950
     });

     var columns =[ {id: "button", name: "", field: "id", formatter: buttonFormatter, minWidth: 80, },#{collection.schema.map{|s| '{id: "'+ s.field_name + '", name: "' + s.name + '", field: "' + s.field_name + '", minWidth: 150, header: {buttons: [{cssClass: "icon-edit",tooltip: "Edit Column.",handler: function(e){load_modal(\''+edit_project_collection_schema_path(project,collection,s)+'\')}}]},sortable: true' + "#{s.controlled_vocabulary_id.nil? ? "" : ", formatter: cvFormatter"}" + "#{s.associated_schema_id.nil? ? "" : ", formatter: assocFormatter"}" + "#{s.is_file ?  ", formatter: assocFormatter" : ""}" + '}'}.join(',')}];

     var options = {
       enableCellNavigation: true,
       enableColumnReorder: false,
       multiColumnSort: true,
       enableRowReordering: true,
       showHeaderRow: true,
       headerRowHeight: 30,
       explicitInitialization: true
     };

    
     columns[0].header = {
         buttons: [
           {
             cssClass: "icon-plus btn btn-mini schema-new",
             tooltip: "Add Column",
             handler: function(e) {
               load_modal('#{new_project_collection_schema_path(project,collection)}')
             }
           },
           {
              cssClass: "btn btn-mini icon-filter",
              tooltip: "Filter",
              handler: function(e) {
                $('#edit-filters').modal();
              }
            },
         ]
       };
       
    data=[]
    //grid = new Slick.Grid("#myGrid", dataView, columns, options);
    grid = new Slick.Grid("#myGrid", loader.data, columns, options);
    //$.getJSON("#{project_collection_objects_path(project, collection, :format=> 'json')}", function(jsondata) {
    //  data = jsondata
    //}).always(function(){
       
       var headerButtonsPlugin = new Slick.Plugins.HeaderButtons();
       grid.registerPlugin(headerButtonsPlugin);
       grid.registerPlugin(new Slick.AutoTooltips({ enableForHeaderCells: true }) );
       var pager = new Slick.Controls.Pager(dataView, grid, $("#pager"));
       
       grid.onSort.subscribe(function (e, args) {
             loader.setSort(args.sortCols[0].sortCol.field, args.sortAsc ? 1 : -1);
             var vp = grid.getViewport();
             loader.ensureData(vp.top, vp.bottom);
             grid.render()
           });
       var columnFilters = {};
       function filter(item) {
         for (var columnId in columnFilters) {
           if (columnId !== undefined && columnFilters[columnId] !== "") {
             var c = grid.getColumns()[grid.getColumnIndex(columnId)];
             if(item[c.field] != undefined){
               if (item[c.field].toString().indexOf(columnFilters[columnId]) == -1){
                 // != columnFilters[columnId]) {
                 return false;
               }
             }
             else{
               return false;
             }
           }
         }
         return true;
       }
       
       dataView.onRowCountChanged.subscribe(function (e, args) {
             grid.updateRowCount();
             grid.render();
           });

           dataView.onRowsChanged.subscribe(function (e, args) {
             grid.invalidateRows(args.rows);
             grid.render();
           });

           $(grid.getHeaderRow()).delegate(":input", "change keyup", function (e) {
             var columnId = $(this).data("columnId");
             if (columnId != null && columnId != "button") {
               columnFilters[columnId] = $.trim($(this).val());
               dataView.refresh();
             }
           });

           grid.onHeaderRowCellRendered.subscribe(function(e, args) {
               $(args.node).empty();
               $("<input type='text'>")
                  .data("columnId", args.column.id)
                  .val(columnFilters[args.column.id])
                  .appendTo(args.node);
           });
           grid.onViewportChanged.subscribe(function (e, args) {
                 var vp = grid.getViewport();
                 loader.ensureData(vp.top, vp.bottom);
               });
           loader.onDataLoading.subscribe(function () {
                 if (!loadingIndicator) {
                   loadingIndicator = $("<span class='loading-indicator'><label>Buffering...</label></span>").appendTo(document.body);
                   var $g = $("#myGrid");

                   loadingIndicator
                       .css("position", "absolute")
                       .css("top", $g.position().top + $g.height() / 2 - loadingIndicator.height() / 2)
                       .css("left", $g.position().left + $g.width() / 2 - loadingIndicator.width() / 2);
                 }

                 loadingIndicator.show();
               });

               loader.onDataLoaded.subscribe(function (e, args) {
                 for (var i = args.from; i <= args.to; i++) {
                   grid.invalidateRow(i);
                 }

                 grid.updateRowCount();
                 grid.render();

                 loadingIndicator.fadeOut();
               });
        grid.init();
        grid.autosizeColumns();
        //dataView.beginUpdate();
        //dataView.setItems(data);
        //dataView.setFilter(filter);
        //dataView.endUpdate();
        //grid.render();
        grid.onViewportChanged.notify();
    //});
  });
  
%br(clear = 'all')